{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json# ",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The storage account to use for sharing data"
      }
    },
    "storageAccountKey": {
      "type": "string",
      "metadata": {
        "description": "The key of the storage account"
      }
    },
    "fileShareName": {
      "type": "string",
      "metadata": {
        "description": "The file share to mount from the storage account"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "dnsNameForContainerServicePublicIP": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the container service.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "masterVMSize": {
      "type": "string",
      "metadata": {
        "description": "The VM role size of the master node(s)"
      }
    },
    "masterCount": {
      "type": "int",
      "metadata": {
        "description": "The count of master"
      }
    },
    "masterConfiguration": {
      "type": "string",
      "metadata": {
        "description": "The configuration of the master specifying whether or not they also act as slaves"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "metadata": {
        "description": "The network subnet"
      }
    },
    "subnetRef": {
      "type": "string",
      "metadata": {
        "description": "The network subnet reference"
      }
    },
    "masterFirstAddr": {
      "type": "int",
      "metadata": {
        "description": "The value of the 4th IPv4 octet of the first master within the subnet"
      }
    },
    "masterVMNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "The vm name prefix of the master"
      }
    },
    "osImagePublisher": {
      "type": "string",
      "metadata": {
        "description": "The publisher name to identify the OS image."
      }
    },
    "osImageOffer": {
      "type": "string",
      "metadata": {
        "description": "The offer name to identify the OS image."
      }
    },
    "osImageSKU": {
      "type": "string",
      "metadata": {
        "description": "The sku to identify the OS image."
      }
    },
    "osImageVersion": {
      "type": "string",
      "metadata": {
        "description": "The version to identify the OS image."
      }
    },
    "customScriptLocation": {
      "type": "string",
      "metadata": {
        "description": "The github location for the shell scripts."
      }
    },
    "swarmEnabled": {
      "type": "string",
      "metadata": {
        "description": "Flag for enabling the Docker Swarm framework."
      }
    },
    "marathonEnabled": {
      "type": "string",
      "metadata": {
        "description": "Flag for enabling the Marathon framework."
      }
    },
    "chronosEnabled": {
      "type": "string",
      "metadata": {
        "description": "Flag for enabling the Chronos framework."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH rsa public key string.  Use 'disabled' to not configure access with SSH rsa public key."
      }
    },
    "omsStorageAccount": {
      "type": "string",
      "metadata": {
        "description": "The storage account for OMS log data."
      }
    },
    "omsStorageAccountKey": {
      "type": "securestring",
      "metadata": {
        "description": "The storage account primary or secondary key for OMS log data."
      }
    }
  },
  "variables": {
    "availabilitySet": "masterAvailabilitySet",
    "nodesLbName": "nodeslb",
    "nodesLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('nodesLbName'))]",
    "nodesLbIPConfigName": "NodesLBFrontEnd",
    "nodesLbIPConfigID": "[concat(variables('nodesLbID'),'/frontendIPConfigurations/', variables('nodesLbIPConfigName'))]",
    "nodesLbBackendPoolName": "node-pool",
    "wgetCommandPrefix": "[concat('wget --tries 20 --retry-connrefused --waitretry=15 -qO- ', parameters('customScriptLocation'), 'configure-mesos-cluster.sh | nohup /bin/bash -s ')]",
    "wgetCommandPostfix":  " >> /var/log/azure/cluster-bootstrap.log 2>&1 &'",
    "commandPrefix": "/bin/bash -c '"
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('dnsNameForContainerServicePublicIP')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForContainerServicePublicIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('nodesLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('dnsNameForContainerServicePublicIP'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('nodesLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('dnsNameForContainerServicePublicIP'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('nodesLbBackendPoolName')]"
          }
        ],
        "probes": [],
        "loadBalancingRules": [],
        "inboundNatRules": [
          {
            "name": "[concat('SSH-',parameters('masterVMNamePrefix'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('nodesLbIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2211,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat('RConsole-Port', '')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('nodesLbIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 5055,
              "backendPort": 5055,
              "enableFloatingIP": false
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('masterVMNamePrefix'), '-nic')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nodesLbID')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(parameters('subnetPrefix'),'0/18')[0], parameters('masterFirstAddr'))]",
              "subnet": {
                "id": "[parameters('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('nodesLbID'), '/backendAddressPools/', variables('nodesLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('nodesLbID'),'/inboundNatRules/SSH-',parameters('masterVMNamePrefix'))]"
                },
                {
                  "id": "[concat(variables('nodesLbID'),'/inboundNatRules/RConsole-Port')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('masterVMNamePrefix'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('masterVMNamePrefix'), '-nic')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySet'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('masterVMSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('masterVMNamePrefix'))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('osImagePublisher')]",
            "offer": "[parameters('osImageOffer')]",
            "sku": "[parameters('osImageSKU')]",
            "version": "[parameters('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(parameters('masterVMNamePrefix'),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', parameters('storageAccountName'), '.blob.core.windows.net/vhds/', parameters('masterVMNamePrefix'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('masterVMNamePrefix'), '-nic'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('masterVMNamePrefix'), '/configuremaster')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('masterVMNamePrefix'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [],
          "commandToExecute": "[concat(variables('commandPrefix'), variables('wgetCommandPrefix'), parameters('masterCount'), ' ', parameters('masterConfiguration'), ' ', parameters('masterVMNamePrefix'), ' ', parameters('swarmEnabled'), ' ', parameters('marathonEnabled'), ' ', parameters('chronosEnabled'), ' ', parameters('omsStorageAccount'), ' ', parameters('omsStorageAccountKey'), ' ', parameters('adminUsername'), ' \"', parameters('sshRSAPublicKey'), '\" ' , parameters('storageAccountName'),' ',  parameters('storageAccountKey'), ' ', parameters('fileShareName'), ' ' , variables('wgetCommandPostfix') )]"
        }
      }
    }
  ]
}
